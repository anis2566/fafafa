generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Class {
  Two
  Three
  Four
  Five
  Six
  Seven
  Eight
  Nine
  Ten
  HscFirstYear
  HscSecondYear
}

enum CounterClass {
  Two
  Three
  Four
  Five
  Six
  Seven
  Eight
  Nine
  Ten
  HscFirstYear
  HscSecondYear
  Teacher
}

enum Shift {
  Morning
  Day
  Evening
  Night
}

enum Religion {
  Islam
  Hinduism
  Christianity
  Buddhism
  Other
}

enum Group {
  Science
  Humanities
  BusinessStudies
}

enum Nationality {
  Bangladeshi
  Foreigner
}

enum Gender {
  Male
  Female
  Other
}

enum PaymentStatus {
  Paid
  Unpaid
  NA
}

enum TransactionStatus {
  Pending
  Processing
  Approve
  Reject
}

enum TeacherPaymentStatus {
  Pending
  Approve
  Reject
  Dismiss
}

enum PaymentMethod {
  Cash
  MobileBanking
}

enum Month {
  January
  February
  March
  April
  May
  June
  July
  August
  September
  October
  November
  December
}

enum Day {
  Saturday
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
}

enum Role {
  User
  Teacher
  Management
  Accountant
  Marketer
  OfficeAssistant
  HR
  Admin
}

enum Status {
  Pending
  Active
  Suspended
}

enum RoomStatus {
  Active
  Deactive
}

enum HouseStatus {
  Active
  Deactive
}

enum Level {
  Primary
  Seconday
  HigherSecondary
}

enum Expenses {
  Marketing
  FoodCost
  PhoneCost
  ComputerAndPaper
  OthersCost
}

enum AttendenceStatus {
  P
  A
  NA
  H
}

enum AbsentReason {
  Tommorow
  SwitchOff
  NoAnswer
  Ill
  Custom
}

enum LeaveStatus {
  Pending
  Approved
  Rejected
}

enum NoticeType {
  Student
  Teacher
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?         @db.Text
  emailVerified DateTime?
  image         String?
  role          Role            @default(User)
  status        Status          @default(Pending)

  teacher       Teacher?
  teacherRequest  TeacherRequest?
  accounts      Account[]
  references    Student[]
  pushSubscription PushSubscriber[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier])
}

model PushSubscriber {
  id                    String          @id @default(cuid())
  endpoint              String 
  auth                  String
  p256dh                String
  
  userId                String 
  user                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([userId])
} 

model Student {
  id            String          @id @default(cuid())
  session       Int
  studentId     Int
  name          String
  nameBangla    String
  fName         String
  mName         String
  gender        Gender
  dob           DateTime
  nationality   Nationality
  religion      Religion
  imageUrl      String

  school        String
  class         Class
  section       String?
  shift         Shift?
  group         Group?
  roll          Int

  fPhone        String
  mPhone        String

  presentHouseNo      String
  presentMoholla      String
  presentPost         String
  presentThana        String
  permanentVillage    String
  permanentPost       String
  permanentThana      String
  permanentDistrict   String
  isPresent           Boolean     @default(true)
  leftReason          String?

  admissionFee        Int
  monthlyFee          Int

  batchId             String?
  batch               Batch?     @relation(fields: [batchId], references: [id])
  referenceId         String?
  reference           User?      @relation(fields: [referenceId], references: [id])

  admissionPayment   AdmissionPayment?
  payments           MonthlyPayment[]
  attendences        Attendence[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
}


model Counter {
  id            String          @id @default(cuid())
  class         CounterClass
  count         Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, class])
}


model AdmissionFee {
  id            String          @id @default(cuid())
  class         Class
  amount         Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, class])
}


model MonthlyFee {
  id            String          @id @default(cuid())
  class         Class
  amount         Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, class])
}


model AdmissionPayment {
  id            String          @id @default(cuid())
  amount        Int
  method        PaymentMethod
  status        PaymentStatus   @default(Unpaid)
  session       Int
  month         Month

  studentId     String @unique
  student       Student     @relation(fields: [studentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, studentId])
}


model MonthlyPayment {
  id            String          @id @default(cuid())
  invoiceId     String?
  amount        Int
  session       Int
  month         Month
  class         Class
  method        PaymentMethod?
  status        PaymentStatus   @default(Unpaid)
  note          String?         @db.Text

  studentId     String
  student       Student     @relation(fields: [studentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, studentId, month])
}


model TeacherPayment {
  id            String          @id @default(cuid())
  teacherName   String
  amount        Int
  session       Int
  classUnit     Int
  incentive     Int?
  deduction     Int?
  deductionUnit Int?
  month         Month
  status        TeacherPaymentStatus   @default(Pending)
  note          String?
  advance       Int                 @default(0)

  teacherId     String
  teacher       Teacher     @relation(fields: [teacherId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, teacherId, month])
}


model TeacherFee {
  id            String          @id @default(cuid())
  perClass        Int

  teacherId     String          @unique
  teacher       Teacher          @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, teacherId])
}

model HousePayment {
  id            String          @id @default(cuid())
  houseName     String
  session       Int
  month         Month
  amount        Int
  method        PaymentMethod?
  note          String?         @db.Text

  houseId     String
  house       House     @relation(fields: [houseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, houseId, month])
}


model Room {
  id            String          @id @default(cuid())
  name          Int
  capacity      Int
  status        RoomStatus      @default(Deactive) 
  availableTime String[]        @default([])
  bookTime      String[]        @default([])

  houseId       String
  house         House           @relation(fields: [houseId], references: [id], onDelete: Cascade)
  batches       Batch[]
  classes       BatchClass[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
}


model House {
  id            String          @id @default(cuid())
  name          String
  roomCount     Int
  status        HouseStatus      @default(Deactive) 

  rooms         Room[]
  payments      HousePayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
}


model Batch {
  id            String          @id @default(cuid())
  name          String
  class         Class
  capacity      Int
  time          String[]
  classTime          String[]
  level         Level

  roomId        String
  room          Room            @relation(fields: [roomId], references: [id], onDelete: Cascade)

  students      Student[]
  classes       BatchClass[]
  attendences   Attendence[]
  leaveClasses   LeaveClass[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
}


model Subject {
  id            String          @id @default(cuid())
  name          String
  class         Class
  level         Level
  group         Group?

  classes       BatchClass[]
  leaveClasses  LeaveClass[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
}


model Teacher {
  id            String          @id @default(cuid())
  session       Int
  teacherId     Int
  name          String
  fName         String
  mName         String
  dob           DateTime
  gender        Gender
  nationality   Nationality
  religion      Religion
  imageUrl      String

  presentHouseNo      String
  presentMoholla      String
  presentPost         String
  presentThana        String
  permanentVillage    String
  permanentPost       String
  permanentThana      String
  permanentDistrict   String

  phone         String
  altPhone      String?

  level         Level[]

  userId        String?     @unique
  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes       BatchClass[]
  fee           TeacherFee?
  bank          Bank?
  teacherRequest  TeacherRequest?
  payments      TeacherPayment[]
  advances      TeacherAdvance[]
  leaves        LeaveApp[]
  leaveClasses  LeaveClass[]

  status         Status    @default(Active)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
}

model TeacherRequest {
  id            String          @id @default(cuid())
  status        Status          @default(Pending)

  teacherId     String          @unique
  teacher       Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  userId        String          @unique
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, teacherId])
}

model Bank {
  id            String          @id @default(cuid())
  current       Int             @default(0)
  advance       Int             @default(0)

  teacherId     String          @unique
  teacher       Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, teacherId])
}

model TeacherAdvance {
  id            String          @id @default(cuid())
  session       Int
  month         Month
  teacherName   String
  amount        Int
  status        TransactionStatus @default(Pending)

  teacherId     String          
  teacher       Teacher         @relation(fields: [teacherId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, teacherId])
}


model LeaveApp {
  id            String          @id @default(cuid())
  reason        String
  days          Day[]
  status        LeaveStatus     @default(Pending) 
  attachments   String[]
  dates         DateTime[]

  teacherId     String          
  teacher       Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classes       LeaveClass[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@unique([id, teacherId])
}


model BatchClass {
  id             String          @id @default(cuid())
  time           String
  day            Day

  roomName       Int
  roomId         String
  room          Room            @relation(fields: [roomId], references: [id], onDelete: Cascade)
  subjectId     String
  subject       Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectName   String
  teacherId     String
  teacher       Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherName   String
  batchId       String
  batch         Batch           @relation(fields: [batchId], references: [id], onDelete: Cascade)
  batchName     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, teacherId, subjectId])
}


model LeaveClass {
  id             String          @id @default(cuid())
  time           String
  day            Day
  date           DateTime
  roomName       Int

  appId         String
  app           LeaveApp        @relation(fields: [appId], references: [id], onDelete: Cascade)
  subjectId     String
  subject       Subject         @relation(fields: [subjectId], references: [id])
  subjectName   String
  teacherId     String?
  teacher       Teacher?        @relation(fields: [teacherId], references: [id])
  teacherName   String?
  batchId       String?
  batch         Batch?           @relation(fields: [batchId], references: [id])
  batchName     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, teacherId, subjectId])
}


model Income {
  id            String          @id @default(cuid())
  name          String
  amount        Int
  month         Month
  session       Int
  note          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
}


model Expense {
  id            String          @id @default(cuid())
  type          Expenses
  amount        Int
  month         Month
  session       Int
  note          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
}


model Attendence {
  id            String          @id @default(cuid())
  session       Int
  month         Month
  day           Int
  class         Class
  status        AttendenceStatus  @default(NA)
  absentReason  String?
  inactiveReaseon String?

  studentId     String
  student       Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  batchId       String?
  batch         Batch?           @relation(fields: [batchId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, studentId, batchId])
}


model Notice {
  id            String          @id @default(cuid())
  type          NoticeType
  text          String          @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
}
